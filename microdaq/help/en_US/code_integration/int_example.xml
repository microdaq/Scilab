<?xml version="1.0" encoding="UTF-8"?>
<refentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svg="http://www.w3.org/2000/svg" xmlns:ns5="http://www.w3.org/1999/xhtml" xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:db="http://docbook.org/ns/docbook" version="5.0-subset Scilab" xml:id="int_example">
	<refnamediv>
		<refname>Custom 'My step' Xcos block for MicroDAQ</refname>
		<refpurpose>This guide shows how to build custom Xcos block which can be used for code generation and host simulation mode</refpurpose>
	</refnamediv>

	<refsection id="Description_block_introduction">
		<para></para><emphasis role="bold">Defining block functionality</emphasis>

		<para>
			Before MicroDAQ Xcos block creation a requirements defining functionality and block interface has to be defined. Our new block will be described by the following properties: 
			<simplelist type="inline">
				<member>name - describes block function, should be unique, created block macro will have provided name with prefix 'mdaq_'</member>
				<member>description - help for user, should provided (if needed) short description of block properties</member>
				<member>parameter name - names of block parameters which can be modified during Xcos diagram creation</member>
				<member>parameter size - size of block parameters</member>
				<member>parameter default value - default values of block parameters</member>
				<member>inputs - definition of block inputs</member>
				<member>outputs - definition of block outputs</member>
                <member>use_sim_script - defines how simulation mode will be performed (from C source or Scilab _sim.sci script)</member>
			</simplelist>

			<para> Our custom block will be named 'My_step', it has three parameters 'Step time', 'Initial value', 'Final value' and 'Terminate value'. All block parameters are scalars, and has default values: 
			'Step time' - 1, 'Initial value' - 0, 'Final value' - 1, 'Terminate value' - 0. Block shall have one output port, output port size is 1. Block doesn't have input ports.</para>

			<para></para><emphasis role="bold">Custom 'Step' block step by step</emphasis>

			<simplelist type="inline">
				<member>Initialize MicroDAQ block structure with mdaqBlock() function</member>
				<programlisting role="example">
					<![CDATA[ block = mdaqBlock() 
   // block  =
   //    name: "new_block"
   //    desc: "Set new_block parameters"
   //    param_name: [2x1 string]
   //    param_size: [2x1 constant]
   //    param_def_val: list
   //    in: 1
   //    out: 1
   //    use_sim_script: %T
   ]]>
				</programlisting>
				<member>
					<para>Set block properties:</para>
					<simplelist type="inline">
						<member>name - our block will have 'My_step', toolbox defines Step function (mdaq_step macro already defined), block name length is limited to 24 signs</member>
						<member>desc - if not provided 'new_block' in default description string will be replaced with block name</member>
						<member>param_name  - this parameter holds block parameters names, it should be provided as an array of strings. Provided names will be used in generated block C code</member>
						<member>param_size - our block will have four scalar parameters, have to be defined in the same order as 'param_name' </member>
						<member>param_def_val - default block parameters values are organized as a list and have to be defined in the same order as 'param_name' </member>
						<member>in - in case of our block we should provide an empty array - block doesn't have input ports</member>
						<member>out - our block will have one output port and its size will be 1 - scalar</member>
                        <member>use_sim_script - if false (%T - by default), our block will use compiled C source in simulation mode. It guarantees the same code on host (simulation mode) and target (code generation) side.
                        If parameter is set to true (%T) then (block.name)_sim.sci script will be executed during simulation mode. 
                        </member>
						<programlisting role="example">
							<![CDATA[ 
	block.name = "My_step";
	block.param_name = ['Step time' 'Initial value' 'Final value' 'Terminate value'];
	block.param_size = [ 1 1 1 1 ];
	block.param_def_val(1) = 1; // 'Step time' default value 
	block.param_def_val(2) = 0; // 'Initial value' default value 
	block.param_def_val(3) = 1; // 'Final value' default value 
	block.param_def_val(4) = 0; // 'Terminate value' default value 
	block.in = []; // block doesnt'have input port
	block.out = [ 1 ]; // one output port - size 1
	block.use_sim_script = %T; // Use Scilab script instead of compiled C source in simulation mode
   ]]>
						</programlisting>

					</simplelist>


				</member>
				<para/>
				<member>Generate and add block to MicroDAQ User palette</member>
				<programlisting role="example">
					<![CDATA[ mdaqBlockAdd(block);    ]]>
				</programlisting>
				<para>This step will generate block C code. Also block macros defining block properties and block behaviour in simulation mode ()'_sim' postfix) are generated. 
						Functions generate following files: 
				</para>
				<simplelist type="inline">
					<member>mdaq_my_step.sci - defines block properties and block appearance </member>
					<member>mdaq_my_step_sim.sci - Scilab code which can be used in simulation mode (not for code generation)</member>
					<member>mdaq_my_step.c - C code containing DSP code used for code generation</member>

				</simplelist>
				<para> Generated C code file is compiled, resulting DSP library will be used to build DSP executable created from Xcos diagram containing 'My_step' block.</para>
				<member>Open for edit mdaq_my_step.c file</member>
				<member>Add your C code. 
					<para>Generated C source code contains 'init', 'inout' and 'end' functions. Function 'init' is executed when model is loaded on target.
					This function can initialize peripherals, allocate resources for block etc. The 'inout' function contains code which will be executed on every model step. 
					The 'end' function is executed when model execution is done or it is stopped with Xcos 'Stop' button</para>

					<programlisting role="example">
						<![CDATA[ 
					    if (get_scicos_time() > step_time)
							*y1 = final_value; 
						else 
							*y1 = initial_value;   
												]]>
					</programlisting>
					<para>The code uses get_scicos_time() function to get current simulation time. Depending on step_time block parameter block output (*y1) is set to final_value or initial_value.</para>
					<para></para>
				</member>

				<member>Build modified C code. First parameter is for enable/disable debug compilation, second parameter is for setting up compilation on host machine (need a supported compiler):
					<para></para>
					<programlisting role="example">
						<![CDATA[ 
						mdaqBlockBuild(%F, %F);     
						]]>
					</programlisting>
					<para>If errors found during compilation correct them and run mdaqBlockBuild() again.</para>
				</member>
				<member>Restart Scilab - in order to reload 'MicroDAQ User' palette MicroDAQ toolbox for Scilab has to be reloaded.</member>
				<member>Start Xcos and open palette browser and locate 'MicroDAQ User' block category.
					<para></para>
					<imagedata align="center" fileref="../images/my_step.png" valign="middle"/>
					<para/>
				</member>
				<member>Create Xcos diagram containing newly created 'My_step' Xcos block
					<para></para>
					<imagedata align="center" fileref="../images/my_step_test.png" valign="middle"/>
					<para/>
				</member>

				<member>Create 'Superblock' by selecting 'My_step', 'SIGNAL' and Scope block.</member>
				<member>Change model sample rate to 0.01 by editing 'Period' Clock block parameter. Set 'Initialisation Time' to 0</member>
				<member>Save model and build and load model by selecting Tools->MicroDAQ build and load model from Xcos menu</member>

				<member> 
							Start model with Xcos 'Start' simulation button
					<imagedata align="center" fileref="../images/my_step_test_result.png" valign="middle"/>
					<para/>
				</member>

				<member> 
					    Check different block parameters
				</member>

			</simplelist>





		</para>

		<emphasis role="bold">'My_step' block in simulation mode</emphasis>
        <para>
        If block.use_sim_script is set to false (%T - by default) then C source will be compiled to shared library which will be used in simulation mode. It guarantees the same code on host (simulation mode) and target (code generation) side. 
        In order to use this option the external C compiler is required. List of supported compilers can be found at: 
        <ulink url="https://help.scilab.org/doc/5.5.2/en_US/supported_compilers.html">https://help.scilab.org/doc/5.5.2/en_US/supported_compilers.html. </ulink>
        If compiler cannot be provided or user want to have different behaviour in simulation mode, the _sim.sci script can be used instead. 
        </para>
        
		<para>
		Generated block files can be used to implement block code for standard simulation mode. 
		In order to add code for simulation mode generated mdaq_my_step_sim.sci file needs to be edited. The mdaq_my_step_sim.sci
		file contains code which will be executed in simulation mode. Function mdaqBlockAdd() generates file which contains 
		block parameters variables which has to be used to change block output. 
		</para>

		<para>Generated mdaq_my_step.sci file: </para>
		<para></para>

		<programlisting role="example">
			<![CDATA[ 
// Generated with MicroDAQ toolbox ver: 1.1.
function block=mdaq_my_step_sim(block,flag)

    global %microdaq
    if %microdaq.dsp_loaded == %F then

        step_time = block.rpar(1);
        initial_value = block.rpar(2);
        final_value = block.rpar(3);
        terminate_value = block.rpar(4);
        select flag
        case -5 // Error
        case 0 // Derivative State Update
        case 1 // Output Update
        case 2 // State Update
        case 3 // OutputEventTiming
        case 4 // Initialization
        case 5 // Ending
        case 6 // Re-Initialisation
        case 9 // ZeroCrossing
        else // Unknown flag
            break
        end
    end
endfunction

	]]>
		</programlisting>

		<para>Similar to C source file we have to add Scilab code which will be performing 'step' function.</para>

		<simplelist type="inline">
			<member>Locate and open generated mdaq_my_step_sim.sci file</member>
			<member>
				<para>Add the following code to 'Output Update' case in generated mdaq_my_step_sim.sci file

					<para></para>

					<programlisting role="example">
						<![CDATA[ 
					    if scicos_time() > step_time then
							block.outptr(1) = final_value; 
						else 
							block.outptr(1) = initial_value;   
						end
						 						]]>
					</programlisting>	


				</para>
			</member>
			<member>In order to use modified code clear old mdaq_my_step_sim function:
				<para>
					<programlisting role="example">
						<![CDATA[ clear mdaq_my_step_sim;    ]]>
					</programlisting>
				</para>
			</member>
			<member>Compile modified file with: 
				<para>
					<programlisting role="example">
						<![CDATA[ mdaqBlockBuild();    ]]>
					</programlisting>
				</para>
			</member>
			<member>Go back to Xcos and run simulation (don't generated DSP application)</member>
		</simplelist>

	</refsection>
</refentry>