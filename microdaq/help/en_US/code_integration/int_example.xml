<?xml version="1.0" encoding="UTF-8"?>
<refentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svg="http://www.w3.org/2000/svg" xmlns:ns5="http://www.w3.org/1999/xhtml" xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:db="http://docbook.org/ns/docbook" version="5.0-subset Scilab" xml:id="int_example">
	<refnamediv>
		<refname>Custom MicroDAQ Xcos block</refname>
		<refpurpose>Create custom block with MicroDAQ code integration tools</refpurpose>
	</refnamediv>

	<refsection id="Description_block_introduction">
		<title>Block requirements</title>
		<para>
			Before MicroDAQ Xcos block creation a requirements defining functionality and block interface has to be defined. Our new block will be described by the following properties: 
			<simplelist type="inline">
				<member>name - describes block function, should be unique, created block macro will have provided name with prefix 'mdaq_'</member>
				<member>description - help for user, shoule provided (if needed) short description of block properties</member>
				<member>parameter name - names of block parameters which can be modified during Xcos diagram creation</member>
				<member>parameter size - size of block parameters</member>
				<member>parameter default value - default values of block parameters</member>
				<member>inputs - definition of block inputs</member>
				<member>outputs - definition of block outputs</member>
			</simplelist>

			<para> Our custom block will be named 'My_step', it has three parameters 'Step time', 'Initial value', 'Final value' and 'Terminate value'. All block parameters are scalars, and has default values: 
			'Step time' - 1, 'Initial value' - 0, 'Final value' - 1, 'Terminate value' - 0. Block shall have one output port, output port size is 1. Block doesn't have input ports.</para>
			<emphasis role="bold">Custom 'Step' block step by step</emphasis>
			<para>
				<simplelist type="inline">
					<member>Initialize MicroDAQ block structure with mdaq_block() function</member>
					<programlisting role="example"><![CDATA[ block = mdaq_block() 
   // block  =
   // 
   //    name: "new_block"
   //    desc: "Set new_block parameters"
   //    param_name: [2x1 string]
   //    param_size: [2x1 constant]
   //    param_def_val: list
   //    in: 1
   //    out: 1
   ]]></programlisting>
					<member><para>Set block properties:</para>
						<simplelist type="inline">
							<member>name - our block will have 'My_step', toolbox defines Step function (mdaq_step macro already defined), block name length is limited to 24 signs</member>
							<member>desc - if not privided 'new_block' in default description string will be replaced with block name</member>
							<member>param_name  - this parameter holds block parameters names, it shoul be provided as an array of strings. Provided names will be used in generated block C code</member>
							<member>param_size - our block will have four scalar parameters, have to be defined in the same order as 'param_name' </member>
							<member>param_def_val - default block parameters values are organized as a list and have to be defined in the same order as 'param_name' </member>
							<member>in - in case of our block we should provide an empty array - block doesn't have input ports</member>
							<member>out - our block will have one output port and its size will be 1 - scalar</member>
							<programlisting role="example"><![CDATA[ 
	block.name = "My_step";
	block.param_name = ['Step time' 'Initial value' 'Final value' 'Terminate value'];
	block.param_size = [ 1 1 1 1 ];
	block.param_def_val(1) = 1; // 'Step time' default value 
	block.param_def_val(2) = 0; // 'Initial value' default value 
	block.param_def_val(3) = 1; // 'Final value' default value 
	block.param_def_val(4) = 0; // 'Terminate value' default value 
	block.in = []; // block doesnt'have input port
	block.out = [ 1 ]; // one output port - size 1
	
   
   ]]></programlisting>

					</simplelist>


					</member>
					<para></para>
					<member>Generate and add block to MicroDAQ User palette</member>
					<programlisting role="example"><![CDATA[ mdaq_block_add(block);    ]]></programlisting>
					<para>This step will generate block C code. Also block macros defining block properties and block behaviour in simulation mode ()'_sim' postfix) are generated. 
						Functions generate following files: 
					</para>
					<simplelist type="inline">
				<member>mdaq_my_step.sci - defines block properties and block appearance </member>
				<member>mdaq_my_step_sim.sci - Scilab code which can be used in simulation mode (not for code generation)</member>
				<member>mdaq_my_step.c - C code containing DSP code used for code generation</member>
					
			</simplelist>
					<para> Generated C code file is compiled, resulting DSP library will be used to build DSP executable created from Xcos diagram containing 'My_step' block.</para>
					<member>Open for edit mdaq_my_step.c file</member>
					<member>Add your C code. 
					<para>Generated C source code contains 'init', 'inout' and 'end' functions. Function 'init' is executed when model is loaded on target.
					This function can initialize peripherals, allocate resources for block etc. The 'inout' function contains code which will be executed on every model step. 
					The 'end' function is executed when model execution is done or it is stopped with Xcos 'Stop' button</para>
					
					<programlisting role="example"><![CDATA[ 
					    if (get_scicos_time() > step_time)
							*y1 = final_value; 
						else 
							*y1 = initial_value;   
												]]></programlisting>
					</member>
					<member></member>
					<member></member>
					
					<member>Restart Scilab - in order to reload 'MicroDAQ User' palette MicroDAQ toolbox for Scilab has to be reloaded.</member>
					<member></member>
					<member></member>
					<member></member>
					<member></member>
				</simplelist>

			</para>



		</para>



	</refsection>
</refentry>
