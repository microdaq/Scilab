<?xml version="1.0" encoding="UTF-8"?>
<refentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svg="http://www.w3.org/2000/svg" xmlns:ns5="http://www.w3.org/1999/xhtml" xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:db="http://docbook.org/ns/docbook" version="5.0-subset Scilab" xml:id="description">
  <refnamediv>
    <refname>Introduction</refname>
    <refpurpose>C/C++ code integration tools introduction</refpurpose>
  </refnamediv>
  <refsection id="Parameters_introduction">
	<para> MicroDAQ toolbox for Scilab allows easy integration of legacy or custom C/C++ code making  Xcos model creation more flexible. User can automatically generate Xcos blocks which executes custom C/C++ code. Moreover block code can be debugged with Code Composer Studio like during normal DSP application development. User can optimize some parts of Xcos model by repleacing Xcos standard block with custom block which contains optimized C code for faster execution. Especially C/C++ programmers will benefit from code integration tools giving easy way to write custom Xcos block which sometimes is easer then making it with standard Xcos blocks. Together with 'Execution profiling' feature which allows precisly determine model execution times code integration tools can be used creating high performance real-time control and measurement applications. </para>
    <simplelist type="inline">
<title>C/C++ code integration howto</title>

	<member><para>Define block input/output ports and block properties</para></member>
	<para>XCos block have input/output ports and properties which user access after double click on it. Block properties are set and after XCos model compilation they cannot be changed. On the other hand input/output block is changing during every step of model execution.
	 Block code contains three functions which are executed depending on model stage execution. The init() function is executed after model is loaded on target. This function should be used to allocate memory, initialize hardware etc. 
	 The most important function is inout() which is executed on every model step. The end() function is called at the end of model execution when user hit XCos Stop button. This function should free allocated resources and de-initialize hardware if is used.</para>  
	 <para></para>
	<member><para>Use mdaqBlock() to initialize MicroDAQ block structure with default values</para></member>
	<member><para>Modify structure to meet your input/output and block parameters requirements</para></member>
	<member><para>Use mdaqBlockAdd() function to generate block macros and C source code</para></member>
	<member><para>Modify generated C source file by adding code to init(), inout() and end() functions</para></member>
	<para>DSPLib library (installed with MicroDAQ toolbox) can be used to have access to MicroDAQ hardware e.g create custom ADC block. In order to do that header file needs to be include in a generated file. The DSPLib headers files are located in mdaqToolboxPath() + "etc\mdaqlib\" toolbox directory.</para>
	<para></para>
	<member><para>If you use external code copy it to userlib directory</para></member>
	<member><para>Modify generated block macros (e.g add event input/output, change block input/output port value type)</para></member>
	<para>In order to modify block input/output ports and properties structure which describes block needs to modified and mdaqBlockAdd() shall be run again. In order to modify e.g. input port value type e.g. to int32 generated block macros needs to be modified. 
	The mdaqBlockAdd() generated two block macros, the one with suffix '_sim' contains Scilab code which is executed during simulation. This code can be modified to reflect DSP C code and can be used in simulation.</para>
	<para></para>
	<member><para>Use mdaqBlockBuild() to rebuild modified/added C/C++ sources</para></member>
	<member><para>If you want to debug your code with Code Composer Studio use mdaqBlockBuild(%T)</para></member>
	<para>The mdaqBlockBuild() called with %T argument will compile user block library with debug symbols and without optimization</para>
	<para></para>
	<member><para>Restart Scilab to reload 'MicroDAQ User' palette</para></member>
	<member><para>Place newly created block into XCos diagram</para></member>
	<member><para>If block C/C++ code needs modification - modify code and use mdaqBlockBuild() (no neet to restart Scilab)</para></member>
	<member><para>Build and deploy your model on MicroDAQ DSP</para></member>
	</simplelist>
  </refsection>
      	<refsection>
        <title>Examples</title>
        <programlisting role="example"><![CDATA[

// call mdaqBlock to initialize block structure describing new MicroDAQ block		
block = mdaqBlock();
block.name = "test"; // set block name 
block.param_name = [ "param1" "param2" "param3" ]; // set block parameters
block.param_size = [ 1 2 4 ]; // set block parameters sizes
block.param_def_val(1) = 1;  // assign default values to defined block parameters according to block.param_size
block.param_def_val(2) = [ 2; 3 ]; 
block.param_def_val(3) = [ 4; 5; 6; 7 ]; 

// define block inputs (four inputs: input 1 - vec size 1, input 2 - vec size 2, input 3 - vec size 4, input 4 - vec size 1)
block.in = [1 2 4 1];

// define block outputs (two outputs both with vector size 1)
block.in = [1 1];

// create block - generate block code and corresponding C source file
mdaqBlockAdd(block);
 ]]></programlisting>

 
    </refsection>
	
	    <refsection>
        <para>Generated C code</para>
		        <programlisting role="c"><![CDATA[ 
/* Generated with MicroDAQ toolbox ver: 1.0. */
#include "scicos_block4.h"


extern double get_scicos_time( void );

/* This function will executed once at the beginning of model execution */
static void init(scicos_block *block)
{
    /* Block parameters */
    double *params = GetRparPtrs(block);

    /* param size = 1 */
    double param1 = params[0];
    int param2_size = 2;
    double *param2 = &params[1];
    int param3_size = 4;
    double *param3 = &params[3];

    /* Add block init code here */
}

/* This function will be executed on every model step */
static void inout(scicos_block *block)
{
    /* Block parameters */
    double *params = GetRparPtrs(block);
    /* param size = 1 */
    double param1 = params[0];
    int param2_size = 2;
    double *param2 = &params[1];
    int param3_size = 4;
    double *param3 = &params[3];

    /* Block input ports */
    double *u1 = GetRealInPortPtrs(block,1);
    int u1_size = GetInPortRows(block,1);    /* u1_size = 1 */

    double *u2 = GetRealInPortPtrs(block,2);
    int u2_size = GetInPortRows(block,2);    /* u2_size = 1 */

    /* Block output ports */
    double *y1 = GetRealOutPortPtrs(block,1);
    int y1_size = GetOutPortRows(block,1);    /* y1_size = 1 */


    /* Add block code here (executed every model step) */

}

/* This function will be executed once at the end of model execution (only in Ext mode) */
static void end(scicos_block *block)
{
    /* Prameters */
    double *params = GetRparPtrs(block);

    /* param size = 1 */
    double param1 = params[0];
    int param2_size = 2;
    double *param2 = &params[1];
    int param3_size = 4;
    double *param3 = &params[3];

    /* Add block end code here */
}

void mdaq_test(scicos_block *block,int flag)
{
    if (flag == 1){            /* set output */
        inout(block);
    }
    else if (flag == 5){       /* termination */
        end(block);
    }
    else if (flag == 4){       /* initialisation */
        init(block);
    }
}

 ]]></programlisting>
    </refsection>
	
  <refsection id="SeeAlso_introduction">
    <title>See Also</title>
    <simplelist type="inline">
		<member><link linkend="mdaqBlock">mdaqBlock</link> : Initialize MicroDAQ block structure</member>
		<member><link linkend="mdaqBlockAdd">mdaqBlockAdd</link> : Generate MicroDAQ block from provided block structure </member>
	  	<member><link linkend="mdaqBlockBuild">mdaqBlockBuild</link> : Build/Rebuild MicroDAQ custom block C/C++ source code</member>
      <member>
        <link type="scilab" linkend="scilab.help/sum">Link to the Scilab help page</link>
      </member>
    </simplelist>
  </refsection>
</refentry>
