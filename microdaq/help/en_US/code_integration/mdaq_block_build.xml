<?xml version="1.0" encoding="UTF-8"?>
<refentry xmlns="http://docbook.org/ns/docbook" 
xmlns:xlink="http://www.w3.org/1999/xlink" 
xmlns:svg="http://www.w3.org/2000/svg" 
xmlns:ns5="http://www.w3.org/1999/xhtml" 
xmlns:mml="http://www.w3.org/1998/Math/MathML" 
xmlns:db="http://docbook.org/ns/docbook" 
version="5.0-subset Scilab" 
xml:id="mdaqBlockBuild">
  <refnamediv>
    <refname>mdaqBlockBuild</refname>
    <refpurpose>Build/Rebuild MicroDAQ custom block C/C++ source code</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
	<title>Description</title>
	<para>This function rebuilds/builds all modified user blocks C source files. Function allows to compile library with debug symbols and with -o2 optimization. In order to recompile whole library all object files needs to be deleted 
from userlib directory (mdaqToolboxPath() + "src\c\userlib")	</para>
<para>
Function compiles every C source file from userlib directory. In order to compile external user C source code e.g. used in custom block, C source needs to be placed in userlib directory or Makefile (from userlib directory) needs to be modified to compile external code.
</para>
<para>
If block.use_sim_script is set to false then C source will be compiled to shared library which will be used in simulation mode. It guarantees the same code on host (simulation mode) and target (code generation) side. 
In order to use this option the external C compiler is required. List of supported compilers can be found at: 
<ulink url="https://help.scilab.org/doc/5.5.2/en_US/supported_compilers.html">https://help.scilab.org/doc/5.5.2/en_US/supported_compilers.html</ulink>
</para>
    <title>Calling Sequence</title>
    <synopsis>
      mdaqBlockBuild(debug);
    </synopsis>
  </refsynopsisdiv>
  <refsection id="Parameters___FUNC_NAME__">
    <title>Arguments</title>
    <itemizedlist>
      <listitem>
	    <para><emphasis role="bold">debug : </emphasis> if %T library will be compiled with debug symbols without optimization</para>
      </listitem>	  
    </itemizedlist>
  </refsection>
  
    	<refsection>
        <title>Examples</title>
        <programlisting role="example"><![CDATA[

// call mdaqBlock to initialize block structure describing new MicroDAQ block		
block = mdaqBlock();
block.name = "test"; // set block name 
block.param_name = [ "param1" "param2" "param3" ]; // set block parameters
block.param_size = [ 1 2 4 ]; // set block parameters sizes
block.param_def_val(1) = 1;  // assign default values to defined block parameters according to block.param_size
block.param_def_val(2) = [ 2; 3 ]; 
block.param_def_val(3) = [ 4; 5; 6; 7 ]; 
block.use_sim_script = %F;

// define block inputs (four inputs: input 1 - vec size 1, input 2 - vec size 2, input 3 - vec size 4, input 4 - vec size 1)
block.in = [ 1 2 4 1];

// define block outputs (two outputs both with vector size 1)
block.in = [ 1 1];

// create block - generate block code and corresponding C source file
mdaqBlockAdd(block);

// modify generated C source file

// recompile modified files
mdaqBlockBuild(); 
 ]]></programlisting>
    </refsection>
	
  <refsection id="SeeAlso___FUNC_NAME__">
    <title>See Also</title>
    <simplelist type="inline">
  <member><link linkend="mdaqBlock">mdaqBlock</link> : Initialize MicroDAQ block structure</member>
	  <member><link linkend="mdaqBlockAdd">mdaqBlockAdd</link> : Generate MicroDAQ block from provided block structure </member>
      <member><link linkend="mdaqBlockDelete">mdaqBlockDelete</link> : Deletes MicroDAQ user block</member>
    </simplelist>
  </refsection>
</refentry>
