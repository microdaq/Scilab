<?xml version="1.0" encoding="UTF-8"?>
<refentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svg="http://www.w3.org/2000/svg" xmlns:ns5="http://www.w3.org/1999/xhtml" xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:db="http://docbook.org/ns/docbook" version="5.0-subset Scilab" xml:id="mdaqAIScan">
	<refnamediv>
		<refname>mdaqAIScan</refname>
		<refpurpose>Starts scanning operation and reads acquired data</refpurpose>
	</refnamediv>

	<refsynopsisdiv>
		<title>Calling Sequence</title>
		<synopsis>
			[data, result] = mdaqAIScan(scanCount, isBlocking)
			[data, result] = mdaqAIScan(linkID, scanCount, isBlocking)
		</synopsis>
	</refsynopsisdiv>

	<refsection id="Description_mdaqAIScan">
		<title>Description</title>
		<para>
This function starts analog input scanning session and reads acquired data. A function call has to be preceded with <link linkend="mdaqAIScanInit">mdaqAIScanInit()</link> which initiates scanning session parameters. Blocking or non-blocking operation is defined by isBlocking argument. When blocking(isBlocking=%T) mode is used, function will block Scilab command line until required number of scan is acquired. The function has fixed 2-second time-out, a user has to provide scanCout argument which will not cause <link linkend="mdaqAIScan">mdaqAIScan()</link> function time-out. When non-blocking (isBlocking=%F) mode is used, function acquired scan data which is currently available in analog input data queue. The number of acquired scans is returned by result output argument. The scanCount argument in non-blocking mode determines maximum number of scans which can be acquired by function call. Values of acquired data, returned as an m-by-n array, where m is the number of acquired scans, and n is the number of used input channels (defined during initialization with <link linkend="mdaqAIScanInit">mdaqAIScanInit()</link> function call).
		</para> 
		<para>
			<emphasis role="bold">Limitation:</emphasis> ADC1-DAC01 MicroDAQ configuration doesn't support running simultaneously AI and AO scanning sessions.
		</para>
	</refsection>  

	<refsection id="Parameters_mdaqAIScan">
		<title>Input arguments</title>
		<itemizedlist>
			<listitem>
				<para>
					<emphasis role="bold">linkID: </emphasis> Valid connection link id (optional)</para>
			</listitem>
			<listitem>
				<para>
					<emphasis role="bold">scanCount:  </emphasis> number of scans to read, when 0 function starts acquisition without reading data</para>
			</listitem>
			<listitem>
				<para>
					<emphasis role="bold">isBlocking:  </emphasis> blocking or non-blocking read (%T / %F)</para>
			</listitem>
		</itemizedlist>
	</refsection>

	<refsection id="Parameters_mdaqAIScan">
		<title>Output arguments</title>
		<itemizedlist>
			<listitem>
				<para>
					<emphasis role="bold">data: </emphasis> Values of acquired data, specified as an m-by-n matrix, where m is the number of scans, and n is the number of used channels.</para>
			</listitem>
			<listitem>
				<para>
					<emphasis role="bold">result:  </emphasis> number of acquired scans</para>
			</listitem>
		</itemizedlist>
	</refsection>


	<refsection>
		<title>Examples</title>
		<para> Perform blocking data acquisition from 8 single-ended analog input channels, one analog input range, scan frequency of 10kHz and 1 second duration.</para>
		<programlisting role="example">
			<![CDATA[
			mdaqAIScanInit(1:8, [-10,10], %F, 10000, 1)
			plot(mdaqAIScan(10000, %T));
			 ]]>
		</programlisting>

		<para> Perform blocking data acquisition from 8 single-ended analog input channels, one analog input range, scan frequency of 10kHz and 1 second duration.</para>
		<programlisting role="example">
			<![CDATA[
			aiData = [];
			dataCount = 0;
			mdaqAIScanInit(1:8, [-10,10], %F, 10000, 1)
			for i=1:10
				[data result] = mdaqAIScan(1000, %T);
				aiData = [aiData; data];
				dataCount = dataCount + result;
				mprintf('Acquired %d scans (total: %d scans)\n', result, dataCount);
			end
			mdaqAIScanStop();
			plot(aiData);
			 ]]>
		</programlisting>

		<para> Perform non-blocking data acquisition from 8 single-ended analog input channels, one analog input range, scan frequency of 10kHz and 1 second duration.</para>
		<programlisting role="example">
			<![CDATA[
			aiData = [];
			dataCount = 0;
			mdaqAIScanInit(1:8, [-10,10], %F, 10000, 1)
			while(dataCount < 10000)
				[data result] = mdaqAIScan(1000, %F);
				aiData = [aiData; data];
				dataCount = dataCount + result;
				if result > 0 then
					mprintf('Acquired %d scans (total: %d scans)\n', result, dataCount);
				end
			end
			mdaqAIScanStop();
			plot(aiData);
			 ]]>
		</programlisting>
	</refsection>

	<refsection id="SeeAlso_mdaqAIScan">
		<title>See Also</title>
		<simplelist type="inline">
			<member>
				<link linkend="mdaqAIScanInit">mdaqAIScanInit</link>
			</member>
			<member>
				<link linkend="mdaqAIScanStop">mdaqAIScanStop</link>
			</member>

		</simplelist>
	</refsection>
</refentry>
