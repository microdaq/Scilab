<?xml version="1.0" encoding="UTF-8"?>
<refentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svg="http://www.w3.org/2000/svg" xmlns:ns5="http://www.w3.org/1999/xhtml" xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:db="http://docbook.org/ns/docbook" version="5.0-subset Scilab" xml:id="mdaq_ao_scan_data">
	<refnamediv>
		<refname>mdaq_ao_scan_data</refname>
		<refpurpose>Queues data to be output</refpurpose>
	</refnamediv>
	
	<refsynopsisdiv>
		<title>Calling Sequence</title>
		<synopsis>
			result = mdaq_ao_scan_data(data, opt);
			result = mdaq_ao_scan_data(linkID, data, opt);
		</synopsis>
	</refsynopsisdiv>
	
	<refsection id="Description_mdaq_ao_data_queue">
		<title>Description</title>
		
				<para> This function is part of analog scan functionality and has to be called in the following sequence:
		<orderedlist>
			<listitem>
				<para>Initialize scanning session - <link linkend="mdaq_ao_scan_init">mdaq_ao_scan_init()</link></para>
			</listitem>
			<listitem>
				<para>Start scanning session - <link linkend="mdaq_ao_scan">mdaq_ao_scan()</link></para>
			</listitem>
			<listitem>
				<para><emphasis role="bold">Queue new data</emphasis> - <link linkend="mdaq_ao_scan_data">mdaq_ao_scan_data()</link></para>
			</listitem>
			<listitem>
				<para>Stop scanning session - <link linkend="mdaq_ao_scan_stop">mdaq_ao_scan_stop()</link></para>
			</listitem>
		</orderedlist>
		</para> 
		
		<para>
			This function queues data to be output. A function call has to be preceded with <link linkend="mdaq_ao_scan_init">mdaq_ao_scan_init()</link>. Function queues data in the stream and periodic mode. The data argument must have the same size as the data argument in function <link linkend="mdaq_ao_scan_init">mdaq_ao_scan_init()</link>. The periodic mode uses a single buffer which data is output from. When the end of the buffer is reached, data index is switched to the beginning of the buffer. The <link linkend="mdaq_ao_scan_data">mdaq_ao_scan_data()</link> function overwrites whole buffer with new data. Depending on the scanning mode opt argument has a different meaning. When the periodic mode is used opt argument allows controlling data index after queuing data. When opt=%T data index will be set to the beginning of the buffer. If opt=%F queue operation doesn't affect data index. 
		</para>
      <para>
         <inlinemediaobject>
            <imageobject>
               <imagedata align="center" fileref="../../../help/en_US/images/periodic_mode_queue.png" valign="middle" />
            </imageobject>
         </inlinemediaobject>
      </para>
		<para>
			When stream mode is used opt argument determines blocking or non-blocking operation of <link linkend="mdaq_ao_scan_data">mdaq_ao_scan_data()</link>. The blocking operation (opt=%T) will block Scilab console until data is queued. The stream mode uses two buffers to ensure uninterrupted analog signal generation. Queuing data is only possible when one buffer is empty, if both are queued function will wait(opt=%T) or return negative result(opt=%F). In blocking mode <link linkend="mdaq_ao_scan_data">mdaq_ao_scan_data()</link> has 1 second time-out. If non-blocking operation (opt=%F) is used function will return immediately with result containing a number of queued data.
        </para> 
      <para>
         <inlinemediaobject>
            <imageobject>
               <imagedata align="center" fileref="../../../help/en_US/images/stream_blocking.png" valign="middle" />
            </imageobject>
         </inlinemediaobject>
      </para>
	  
	  <para>
	  Data has to be queued before data index reaches the end of previously queued data. Otherwise, last value will remain on analog output. 
	  </para>
      <para>
         <inlinemediaobject>
            <imageobject>
               <imagedata align="center" fileref="../../../help/en_US/images/stream_not_queue.png" valign="middle" />
            </imageobject>
         </inlinemediaobject>
      </para>
	  
	</refsection>  
  
	<refsection id="Parameters_mdaq_ao_data_queue">
		<title>Input arguments</title>
		<itemizedlist>
			<listitem><para><emphasis role="bold">linkID: </emphasis> Valid connection link ID (optional)</para></listitem>
			<listitem><para><emphasis role="bold">data: </emphasis> Output data values, specified as an m-by-n matrix, where m is the number of scans to generate, and n is the number of used output channels.</para></listitem>
			<listitem><para><emphasis role="bold">blocking:  </emphasis>  Blocking mode (%F / %T)</para></listitem>
		</itemizedlist>
	</refsection>
	
	<refsection>
        <title>Examples</title>
		
		
		<para> Queue output data for a single channel in periodic mode</para>

        <programlisting role="example"><![CDATA[
			data0 = linspace(0,2,1000)';
			mdaq_ao_scan_init(1, data0, 1, %F, 1000, 10);
			mdaq_ao_scan();
			 ]]>
		</programlisting>
		
		<para> Queue output data for multiple channel in periodic mode</para>

        <programlisting role="example"><![CDATA[
			data0 = linspace(0,1,1000)';
			data1 = linspace(0,2,1000)';
			mdaq_ao_scan_init(1:2, [data0 data1], 1, %F, 1000, 10);
			mdaq_ao_scan();
			 ]]>
		</programlisting>
        <para> 
		Generate sine waveform (AO1) with increasing amplitude and acquire data from analog input (AI1) simultaneously. In this example analog output session uses stream mode. Analog output data (sine waveform) is queued in the loop. Using blocking mode for analog output and input session ensures function call synchronization.

		</para>
        <programlisting role="example"><![CDATA[
aiData = [];
channels = 1
scanFrequency = 1000;
scanDataSize = 1000;
duration = 5;
expValue = -3;
sineBias = 2.5;
sineBase = sin(linspace(0, 2*%pi, scanDataSize));
expWave = exp(linspace(expValue, expValue + 0.8, scanDataSize));
sineWave = sineBase. * expWave + sineBias;

// initialize analog input/output scanning sessions
mdaq_ao_scan_init(channels, sineWave', 1, %T, scanFrequency, duration);
mdaq_ai_scan_init(channels, 1, %F, scanFrequency, duration);

// start AI scanning without waiting for data
mdaq_ai_scan(0, %T);
// start signal generation
mdaq_ao_scan();
n = (scanFrequency  * duration) / scanDataSize;

for i=1:n-1
    expValue = expValue + 0.8;
    expWave = exp(linspace(expValue, expValue + 0.8, scanDataSize));
    sineWave = sineBase. * expWave + sineBias;
    // queue new data 
    mdaq_ao_scan_data(channels, sineWave', %T);
    // start and acquire data from analog inputs
    aiData = [aiData; mdaq_ai_scan(scanDataSize, %T)];
end
// acquire rest of samples
aiData = [aiData; mdaq_ai_scan(scanDataSize, %T)];
plot(aiData)
clear aiData;
 ]]></programlisting>
<para>
	Results:
	<imagedata align="center" fileref="../images/cotinuous_waveforms.png" valign="middle"/>
</para>
    </refsection>
	
  <refsection id="SeeAlso_mdaq_ao_data_queue">
		<title>See Also</title>
		<simplelist type="inline">
			<member><link linkend="mdaq_ao_scan_init">mdaq_ao_scan_init</link></member>
			<member><link linkend="mdaq_ao_scan">mdaq_ao_scan</link></member>
			<member><link linkend="mdaq_ao_scan_stop">mdaq_ao_scan_stop</link></member>
			
		</simplelist>
  </refsection>
</refentry>
