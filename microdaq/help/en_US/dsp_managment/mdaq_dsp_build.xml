<?xml version="1.0" encoding="UTF-8"?>
<refentry xmlns="http://docbook.org/ns/docbook" 
xmlns:xlink="http://www.w3.org/1999/xlink" 
xmlns:svg="http://www.w3.org/2000/svg" 
xmlns:ns5="http://www.w3.org/1999/xhtml" 
xmlns:mml="http://www.w3.org/1998/Math/MathML" 
xmlns:db="http://docbook.org/ns/docbook" 
version="5.0-subset Scilab" 
xml:id="mdaq_dsp_build">
  <refnamediv>
    <refname>mdaq_dsp_build</refname>
    <refpurpose>Build model for MicroDAQ DSP</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
	<title>Description</title>
	<para>This function builds DSP executable from provided Xcos model.</para>
    <title>Calling Sequence</title>
    <synopsis>
      mdaq_dsp_build(path);
	  mdaq_dsp_build(connection_id,path);
    </synopsis>
  </refsynopsisdiv>
  <refsection id="Parameters___FUNC_NAME__">
    <title>Arguments</title>
    <itemizedlist>
	    <listitem><para><emphasis role="bold">connection_id : </emphasis> Connection ID returned by mdaq_open() (OPTIONAL)</para></listitem>
	    <listitem><para><emphasis role="bold">path : </emphasis> Xcos model path</para></listitem>
    </itemizedlist>
  </refsection>
  
    	<refsection>
	<title>Example</title>
          <programlisting role="example"><![CDATA[
// Script execution duration in seconds
TIME = 20;

// build DSP binary from Xcos model 
mdaq_dsp_build(mdaq_toolbox_path() + filesep() + "examples" + filesep() +"fft_demo.zcos");

// Start DSP application
result = mdaq_dsp_start('fft_demo_scig\fft_demo.out'); 
if result < 0 then
    abort;
end

// Register signal ID and signal size
result = mdaq_dsp_signal(123, 1); 
if result < 0 then
    disp("ERROR: unable to register signal"); 
    abort;
end

first_time = 1; 
a = [];
// Process data from DSP 
sample_count = 500;
for i=1:(10 * TIME)
    [result, s] = mdaq_dsp_signal_read(sample_count);
    if result < 0 then
        disp("ERROR: unable to read signal data!"); 
        abort;
    end

    t = 0:1/sample_count:1;
    N=size(t,'*'); //number of samples
    y=fft(s');

    f=sample_count*(0:(N/2))/N; //associated frequency vector
    n=size(f,'*');
    if first_time == 1 then
        clf()
        plot(f,abs(y(1:n)))
        first_time = 0;
        a = gca();
    else
        a.children.children.data(:,2) = abs(y(1:n))';
    end
end

// Stop DSP execution
mdaq_dsp_stop(); 

 ]]></programlisting>
 </refsection>
  <refsection id="SeeAlso___FUNC_NAME__">
    <title>See Also</title>
    <simplelist type="inline">
     <member><link linkend="mdaq_dsp_start">mdaq_dsp_start</link> : Start DSP execution </member>
	  <member><link linkend="mdaq_dsp_stop">mdaq_dsp_stop</link> : Terminate DSP execution </member>
	  <member><link linkend="mdaq_dsp_signal_read">mdaq_dsp_signal_read</link> : Read DSP signal data </member>
	  <member><link linkend="mdaq_dsp_signal">mdaq_dsp_signal</link> : Register DSP Signal ID </member>
      <member>
        <link type="scilab" linkend="scilab.help/sum">Link to the Scilab help page</link>
      </member>
    </simplelist>
  </refsection>
</refentry>
