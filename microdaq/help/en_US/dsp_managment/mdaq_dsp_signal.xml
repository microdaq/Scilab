<?xml version="1.0" encoding="UTF-8"?>
<refentry xmlns="http://docbook.org/ns/docbook" 
xmlns:xlink="http://www.w3.org/1999/xlink" 
xmlns:svg="http://www.w3.org/2000/svg" 
xmlns:ns5="http://www.w3.org/1999/xhtml" 
xmlns:mml="http://www.w3.org/1998/Math/MathML" 
xmlns:db="http://docbook.org/ns/docbook" 
version="5.0-subset Scilab" 
xml:id="mdaq_dsp_signal">
  <refnamediv>
    <refname>mdaq_dsp_signal</refname>
    <refpurpose>Register SIGNAL block</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
	<title>Description</title>
	<para>This function registers Xcos signal. Xcos model has to contain SIGNAL block with defined ID. In order to read data from Xcos generated DSP application SIGNAL block with its ID needs to be registered.
	Signal ID registration has to be done before read data operation done with mdaq_dsp_signal_read().
	</para>
	<para>WARNING: Current mdaq_dsp_signal_read() implementation allows reading only single XCos signal - use MUX block to gather signals into one signal vector.  </para>
    <title>Calling Sequence</title>
    <synopsis>
      mdaq_dsp_signal(signal_id, signal_size);
	  mdaq_dsp_signal(connection_id, signal_id, signal_size);
    </synopsis>
  </refsynopsisdiv>
  <refsection id="Parameters___FUNC_NAME__">
    <title>Arguments</title>
    <itemizedlist>
      <listitem><para><emphasis role="bold">connection_id : </emphasis> Connection ID returned by mdaq_open() (OPTIONAL)</para></listitem>
	  <listitem><para><emphasis role="bold">signal_id : </emphasis> Signal ID defined in SIGNAL block</para></listitem>
      <listitem><para><emphasis role="bold">signal_size : </emphasis> Signal size (SIGNAL block input vector size)</para></listitem>  
    </itemizedlist>
  </refsection>
    	<refsection>
	<title>Example</title>
          <programlisting role="example"><![CDATA[
// Script execution duration in seconds
TIME = 20;

// Model execution frequency in Hertz
FREQ = 5000;

// Build DSP binary from Xcos model
mdaq_dsp_build(mdaq_toolbox_path() + filesep() + "examples" + filesep() +"fft_demo.zcos");

// Start DSP application
result = mdaq_dsp_start('fft_demo_scig\fft_demo.out', 1.0/FREQ);
if result < 0 then
    abort;
end

// Register signal ID and signal size
result = mdaq_dsp_signal(1, 1);
if result < 0 then
    disp("ERROR: unable to register signal");
    abort;
end

first_time = 1;
a = [];

// Process data from DSP
sample_count = FREQ/10;
fig = figure("Figure_name","MicroDAQ FFT demo");

for i=1:(TIME*10)
    [result, s] = mdaq_dsp_signal_read(sample_count);
    if result < 0 then
        disp("ERROR: unable to read signal data!");
        abort;
    end
    
    N=size(s,'*');  //number of samples
    s = s - mean(s);//cut DC
    y=fft(s');

    f= FREQ*(0:(N/10))/N; //associated frequency vector
    n=size(f,'*');

    if is_handle_valid(fig) then
        if first_time == 1 then
            clf();
            plot(f,abs(y(1:n)));
            title("FFT", "fontsize", 3);
            xlabel("frequency [Hz]","fontsize", 3);
            first_time = 0;
            a = gca();
        else
            a.children.children.data(:,2) = abs(y(1:n))';
        end
    else
        break;
    end
end

// Stop DSP execution
mdaq_dsp_stop();

// Close plot
mprintf("\nFFT demo has been stopped.");
if is_handle_valid(fig) then
    close(fig);
end
 ]]></programlisting>
 </refsection>
  <refsection id="SeeAlso___FUNC_NAME__">
    <title>See Also</title>
    <simplelist type="inline">
     <member><link linkend="mdaq_dsp_start">mdaq_dsp_start</link> : Start DSP execution </member>
	  <member><link linkend="mdaq_dsp_stop">mdaq_dsp_stop</link> : Terminate DSP execution </member>
	  <member><link linkend="mdaq_dsp_signal_read">mdaq_dsp_signal_read</link> : Read DSP signal data </member>
	  <member><link linkend="mdaq_dsp_build">mdaq_dsp_build</link> : Builds DSP application from provided Xcos model </member>
      <member>
        <link type="scilab" linkend="scilab.help/sum">Link to the Scilab help page</link>
      </member>
    </simplelist>
  </refsection>
</refentry>
