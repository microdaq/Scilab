<?xml version="1.0" encoding="UTF-8"?>
<refentry xmlns="http://docbook.org/ns/docbook" 
xmlns:xlink="http://www.w3.org/1999/xlink" 
xmlns:svg="http://www.w3.org/2000/svg" 
xmlns:ns5="http://www.w3.org/1999/xhtml" 
xmlns:mml="http://www.w3.org/1998/Math/MathML" 
xmlns:db="http://docbook.org/ns/docbook" 
version="5.0-subset Scilab" 
xml:id="dsp_stop">
  <refnamediv>
    <refname>dsp_stop</refname>
    <refpurpose>Terminate currently running DSP application</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
	<title>Description</title>
	<para>This function terminates model execution on MicroDAQ DSP core. If function isn't called the TCP/IP connection will remain open and calling dsp_start function will fail.</para>
	<para>Due to nature of TCP/IP protocol opened connection has to be closed with dsp_stop() - otherwise next attempt to start DSP application will fail and MicroDAQ device reboot will be needed!  	</para>
    <title>Calling Sequence</title>
    <synopsis>
      dsp_stop();
    </synopsis>
  </refsynopsisdiv>

  
    	<refsection>
	<title>Example</title>
          <programlisting role="example"><![CDATA[
// Script execution duration in seconds
TIME = 20;

// Load Xcos libs
loadXcosLibs();

// Open FFT example 
importXcosDiagram(mdaq_toolbox_path() + filesep() + "examples" + filesep() +"fft_demo.zcos");

// Build DSP application (don't load on target)
mdaq_code_gen(%F);
		  
// Start DSP application
result = dsp_start('fft_demo_scig\fft_demo.out'); 
if result < 0 then
    abort;
end

// Register signal ID and signal size
result = dsp_signal(123, 1); 
if result < 0 then
    disp("ERROR: unable to register signal"); 
    abort;
end

first_time = 1; 
a = [];
// Process data from DSP 
sample_count = 500;
for i=1:(10 * TIME)
    [result, s] = dsp_signal_get(sample_count);
    if result < 0 then
        disp("ERROR: unable to read signal data!"); 
        abort;
    end

    t = 0:1/sample_count:1;
    N=size(t,'*'); //number of samples
    y=fft(s');

    f=sample_count*(0:(N/2))/N; //associated frequency vector
    n=size(f,'*');
    if first_time == 1 then
        clf()
        plot(f,abs(y(1:n)))
        first_time = 0;
        a = gca();
    else
        a.children.children.data(:,2) = abs(y(1:n))';
    end
end

// Stop DSP execution
dsp_stop(); 

 ]]></programlisting>
 </refsection>
  <refsection id="SeeAlso___FUNC_NAME__">
    <title>See Also</title>
    <simplelist type="inline">
      <member><link linkend="dsp_start">dsp_start</link> : Start DSP execution </member>
	  <member><link linkend="dsp_signal_get">dsp_signal_get</link> : Read DSP signal data </member>
	  <member><link linkend="dsp_signal">dsp_signal</link> : Register DSP Signal ID </member>
      <member>
        <link type="scilab" linkend="scilab.help/sum">Link to the Scilab help page</link>
      </member>
    </simplelist>
  </refsection>
</refentry>
