<?xml version="1.0" encoding="UTF-8"?>
<refentry xmlns="http://docbook.org/ns/docbook" 
xmlns:xlink="http://www.w3.org/1999/xlink" 
xmlns:svg="http://www.w3.org/2000/svg" 
xmlns:ns5="http://www.w3.org/1999/xhtml" 
xmlns:mml="http://www.w3.org/1998/Math/MathML" 
xmlns:db="http://docbook.org/ns/docbook" 
version="5.0-subset Scilab" 
xml:id="mdaqDSPRead">
  <refnamediv>
    <refname>mdaqDSPRead</refname>
    <refpurpose>Read data from DSP task</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
	<title>Calling Sequence</title>
    <synopsis>
      [data] = mdaqDSPRead(linkID, signalID, vectorSize, vectorCount, timeout);
      [data] = mdaqDSPRead(signalID, vectorSize, vectorCount, timeout);
    </synopsis>
  </refsynopsisdiv>
  <refsection id="Parameters___FUNC_NAME__">
	<title>Description</title>
	<para>This function reads data from running DSP application generated from XCos model in external mode. Xcos model has to contain SIGNAL block with defined ID. Function blocks execution until it gathers all requested samples or 'timeout' is reached. For example, if a user wants to read data from DSP application where SIGNAL block with ID=13 is connected to MUX block which is passing 4 doubles (data size = 4), the function call will be as follows: mdaqDSPRead(13, 4, 1, 1). In that case, timeout is set to 1 second. </para>
    <para>
        Signals reading mechanism is buffering data for all signal ONLY from one data request. The data request is performed when there is no data available at specific signal ID. 
        To keep data coherency over the time there is a recommendation to read all signals. Example below: 
          <programlisting role="example"><![CDATA[
          //------ NO DATA LOSS ----
          t0 = mdaqDSPRead(1, vectorSize, vectorCount, timeout); <-- first data request, recv samples from time t0, for all signals  
          t0 = mdaqDSPRead(2, vectorSize, vectorCount, timeout); <-- samples from time t0 
          t0 = mdaqDSPRead(3, vectorSize, vectorCount, timeout); <-- samples from time t0
          
          //------ DATA LOSS ----
          t0 = mdaqDSPRead(1, vectorSize, vectorCount, timeout); <-- first data request, recv samples from time t0, for all signals  
          t1 = mdaqDSPRead(1, vectorSize, vectorCount, timeout); <-- second data request, recv samples from time t1, for all signals  
          t1 = mdaqDSPRead(2, vectorSize, vectorCount, timeout); <-- samples from time t1 
          t1 = mdaqDSPRead(3, vectorSize, vectorCount, timeout); <-- samples from time t1
          ]]></programlisting>
    </para>
    <title>Arguments</title>
    <itemizedlist>
      <listitem><para><emphasis role="bold">linkID: </emphasis> Valid connection link id (optional)</para></listitem>
      <listitem><para><emphasis role="bold">signalID: </emphasis> SIGNAL block identification number from XCOS model</para></listitem>
	  <listitem><para><emphasis role="bold">vectorSize: </emphasis> SIGNAL block data size</para></listitem>
      <listitem><para><emphasis role="bold">vectorCount: </emphasis> number of vectors to read</para></listitem>
	  <listitem><para><emphasis role="bold">timeout: </emphasis> maximum amount of time to wait for data in seconds</para></listitem>	  
    </itemizedlist>
  </refsection>
  	<refsection>
        <title>Examples</title>
<para>
   The examples use Xcos model with MEM_READ and SIGNAL blocks. Model compiles (<link linkend="mdaqDSPBuild">mdaqDSPBuild</link>) to C code and runs (<link linkend="mdaqDSPInit">mdaqDSPInit</link>, <link linkend="mdaqDSPStart">mdaqDSPStart</link>) on dedicated DSP core on MicroDAQ device. The first block is reading data from MicroDAQ shared memory on index 1. It's acting as our input where we can write data through <link linkend="mdaqDSPWrite">mdaqDSPWrite()</link> function. In this model input data is multiplied by factor 2 and passed to SIGNAL block which is our model output. The <link linkend="mdaqDSPRead()">mdaqDSPRead()</link> function receives data from SIGNAL block. Here is a Xcos model used in examples below:
        <programlisting role="example"><![CDATA[
xcos(mdaqToolboxPath() + filesep() + "examples" + filesep() +"dsp_rw_demo.zcos");
]]></programlisting>
            <imagedata align="center" fileref="../images/dsp_rw_demo.png" valign="middle"/></para>
<para>
Example 1: Using standard DSP API
</para>
        <programlisting role="example"><![CDATA[
Freq = 10;     // Hz
Druration = 5; // seconds
signalID = 1;
memIndex = 1;

disp("Building DSP model...");
mdaqDSPBuild(mdaqToolboxPath() + filesep() + "examples" + filesep() +"dsp_rw_demo.zcos");

disp("Starting DSP model...");
mdaqDSPInit('dsp_rw_demo_scig\dsp_rw_demo.out', Freq, Druration);
mdaqDSPStart();

disp("Passing value 2 to DSP model...");
mdaqDSPWrite(memIndex, 2);

disp("Reading data from DSP model...");
data1 = mdaqDSPRead(signalID, 1, 10, -1);
disp(data1);

disp("Passing value 4 to DSP model...");
mdaqDSPWrite(memIndex, 4);

disp("Reading data from DSP model...");
data2 = mdaqDSPRead(signalID, 1, 10, -1);
disp(data2);

disp("Waiting for the end of execution...");
mdaqDSPWait(-1);

disp("End of execution DSP model");
]]></programlisting>

<para>
Example 2: Using DSP task API
</para>
 <programlisting role="example"><![CDATA[
Freq = 10;     // Hz
Druration = 5; // seconds
signalID = 1;
memIndex = 1;

// Create DSP task 
dsp = mdaqDSPTask();

disp("Building DSP model...");
mdaqDSPBuild(mdaqToolboxPath() + filesep() + "examples" + filesep() +"dsp_rw_demo.zcos");

disp("Starting DSP model...");
dsp.init('dsp_rw_demo_scig\dsp_rw_demo.out', Freq, Druration);
dsp.start();

disp("Passing value 2 to DSP model...");
dsp.write(memIndex, 2);

disp("Reading data from DSP model...");
data1 = dsp.read(signalID, 1, 10, -1);
disp(data1);

disp("Passing value 4 to DSP model...");
dsp.write(memIndex, 4);

disp("Reading data from DSP model...");
data2 = dsp.read(signalID, 1, 10, -1);
disp(data2);

disp("Waiting for the end of execution...");
dsp.waitUntilDone(-1);

disp("End of execution DSP model");
 ]]></programlisting>

    </refsection>
  <refsection id="SeeAlso___FUNC_NAME__">
    <title>See Also</title>
    <simplelist type="inline">
	  <member><link linkend="mdaqDSPBuild">mdaqDSPBuild</link> : Builds DSP application from provided Xcos model </member>
	  <member><link linkend="mdaqDSPInit">mdaqDSPInit</link> : Initializes DSP task</member>
      <member><link linkend="mdaqDSPStart">mdaqDSPStart</link> : Start DSP task</member>
	  <member><link linkend="mdaqDSPStop">mdaqDSPStop</link> : Terminates DSP task</member>
      <member><link linkend="mdaqDSPStop">mdaqDSPWrite</link> : Writes data to DSP task</member>
      <member><link linkend="mdaqDSPWait">mdaqDSPWait</link> : Waits until DSP task is complited</member>
      <member><link linkend="mdaqDSPIsDone">mdaqDSPIsDone</link> : Checks DSP task status</member>
      <member>
        <link type="scilab" linkend="scilab.help/sum">Link to the Scilab help page</link>
      </member>
    </simplelist>
  </refsection>
</refentry>
