// Copyright (c) 2015-2019, Embedded Solutions
// All rights reserved.
// This file is released under the 3-clause BSD license. See COPYING-BSD.
   
function [microdaqlib, microdaqBlocks, microdaqMacros, microdaqUserBlocks]  = startModule()
    etc_tlbx  = get_absolute_file_path("microdaq.start");
    etc_tlbx  = getshortpathname(etc_tlbx);
    root_tlbx = strncpy( etc_tlbx, length(etc_tlbx)-length("etc\") );
    
    mprintf("Start MicroDAQ toolbox ver: %s\n", mgetl(root_tlbx + filesep() + "VERSION", 1));
    
    sciVersion = getversion('scilab');
    if getos() == "Linux" then
        // Scilab 6 not stable on linux - no support
        if sciVersion(1:3) <> [ 5,5,2 ] then
            mprintf("\nERROR: On Linux Scilab 5.5.2 is only supported.");
            return
        end
    else
        if sciVersion(1:3) <> [ 6,0,2 ] & sciVersion(1:3) <> [ 5,5,2 ] then
            mprintf("\nERROR: Scilab versions 5.5.2 and 6.0.2 are only supported.");
            return
        end
    end
    
    if sciVersion(1:3) == [ 5,5,2 ] then
        loadXcosLibs();
    end

    [version, opts] = getversion();
    if getos() == "Linux" & opts(2) == 'x86' then 
        mprintf("\nERROR: The x86 architecture is not supported");
        return
    end

    // create global microdaq settings struct
    global %microdaq;
    %microdaq = struct("model", ["Unknown"],..
                        "ip_address", [],..
                        "dsp_loaded", %F,..
                        "dsp_ext_mode", %T,..
                        "dsp_debug_mode", %F,..
                        "private", struct(..
                        "mlink_link_id", -1000,..
                        "userhostlib_link_id", -1000,..
                        "connection_id", -1,..
                        "has_mdaq_block", %F,..
                        "has_mdaq_param_sim", %F,..
                        "mem_write_idx", 0,..
                        "mem_read_idx", 0,..
                        "mem_read_begin", [],..
                        "mem_read_size", [],..
                        "mem_read_file", [],..
                        "to_file_idx", 0,..
                        "dac_idx", 0,..
                        "adc_idx", 0,..
                        "webscope_idx", 0,..
                        "udpsend_idx", 0,..
                        "udprecv_idx", 0,..
                        "tcpsend_idx", 0,..
                        "tcprecv_idx", 0,..
                        "mdaq_signal_id", 0,..
                        "mdaq_param_id", 0,..
                        "ao_scan_ch_count", -1,..
                        "mdaq_hwid", [],..
                        "adc_info", [],..
                        "dac_info", [],..
                        "model_tsamp", -1,..
                        "signal_buffer", list(),..
                        "signal_buffer_size", list(),..
                        "signal_buffer_index", list())..
                        );
    
    if isdef("microdaqlib") then
        warning("MicroDAQ toolbox is already loaded!");
        return;
    end
    
    // Load functions library
    // =============================================================================
    mprintf("\tLoad macros\n");
    pathmacros = pathconvert( root_tlbx ) + "macros" + filesep();
    
    if isdir(pathmacros) == %F then
        macroBinPath = pathconvert(root_tlbx+'/bin/'+string(sci_ver(1)));
        copyfile(macroBinPath, root_tlbx);
    end
    
    
    microdaqlib = lib(pathmacros);
    pathmacros = pathconvert( root_tlbx ) + "macros" + filesep() + "microdaq_blocks" + filesep();
    microdaqBlocks = lib(pathmacros);
    pathmacros = pathconvert( root_tlbx ) + "macros" + filesep() + "microdaq_macros" + filesep();
    microdaqMacros = lib(pathmacros);
    userblock_path = root_tlbx + pathconvert("/macros/user_blocks/");
    
    if isfile(mdaqToolboxPath() + "etc"+filesep()+"mlink"+filesep()+"hwid") then
        load(mdaqToolboxPath() + "etc"+filesep()+"mlink"+filesep()+"hwid");
        %microdaq.private.mdaq_hwid = mdaq_hwid;
        %microdaq.private.adc_info = adc_info;
        %microdaq.private.dac_info = dac_info;
       
        %microdaq.model = 'MicroDAQ E' + string(mdaq_hwid(1))..
        + '-ADC0' + string(mdaq_hwid(2))..
        + '-DAC0' + string(mdaq_hwid(3))..
        + '-' + string(mdaq_hwid(4)) + string(mdaq_hwid(5));
    end
    
    // Load demos
    // =============================================================================
    if or(getscilabmode() == ["NW";"STD"]) then
        mprintf("\tLoad demos\n");
        pathdemos = pathconvert(root_tlbx+filesep()+"demos"+filesep()+"microdaq.dem.gateway.sce", %F, %T);
        add_demo("MicroDAQ", pathdemos);
    end
    
    // Load and add help chapter
    // =============================================================================
    if or(getscilabmode() == ["NW";"STD"]) then
        mprintf("\tLoad help\n");
        path_addchapter = pathconvert(root_tlbx+'/jar/', %F);
        if ( isdir(path_addchapter) <> [] ) then
            add_help_chapter("MicroDAQ", path_addchapter, %F);
        else
            warning("Cannot load help file.")
        end
    end
    
    // Load shared libraries
    mprintf("\tLoad MLink library\n");
    exec(pathconvert(root_tlbx + "/etc/mlink/MLink.sce", %f),-1);
    
    // Load libmdaqblocks
    exec(pathconvert(root_tlbx + "/etc/mdaqlib/loader.sce", %f),-1);
    
    // Add MicroDAQ toolbox options to XCos menu
    xcosAddToolsMenu("MicroDAQ web panel", "mdaq_webpanel()");
    xcosAddToolsMenu("MicroDAQ execution profile", "mdaq_exec_profile_show()");
    xcosAddToolsMenu("MicroDAQ upload model", "mdaq_dsp_upload(%F)");
    xcosAddToolsMenu("MicroDAQ set as startup model", "mdaq_dsp_upload(%T)");
    xcosAddToolsMenu("MicroDAQ build model", "mdaq_code_gen(%F)");
    xcosAddToolsMenu("MicroDAQ run model", "load_last_dsp_image()");
    xcosAddToolsMenu("MicroDAQ build and run model", "mdaq_code_gen(%T)");
    
    // Add blocks to the Xcos palette
    // =============================================================================
    mprintf("\tLoad MicroDAQ blocks\n");

    // if TMPDIR contains gif or svg files remove them
    img_files = ls(TMPDIR);
    img_files_index = grep(img_files, ".gif");
    if img_files_index <> [] then
        for i = 1:size(img_files_index, '*')
            deletefile(TMPDIR + filesep() + img_files(img_files_index(i)));
        end
    end
    
    img_files_index = grep(img_files, ".svg");
    if img_files_index <> [] then
        for i = 1:size(img_files_index, '*')
            deletefile(TMPDIR + filesep() + img_files(img_files_index(i)));
        end
    end
    
    // ---- Load MicroDAQ User blocks ----
    if isfile(userblock_path+'lib') == %T then
        microdaqUserBlocks = lib(userblock_path);
    else
        microdaqUserBlocks = [];
    end
    
    // Load MicroDAQ base blocks
    load_mdaq_palette();
    
    if isfile(userblock_path+'lib') == %T then
        mprintf("\tLoad MicroDAQ User blocks\n");
    
        blocks = [];
        tmp_path = pwd();
        cd(userblock_path);
        macros = ls("mdaq_*.bin");
        cd(tmp_path);
        for b=1:size(macros, "r")
            macros(b) = part(macros(b), 1:length(macros(b)) - 4);
            if part(macros(b), length(macros(b)) - 3:length(macros(b))) <> "_sim"
                if isfile(userblock_path + macros(b) + '.sci')  == %T then
                    blocks = [blocks, macros(b)];
                end
            end
        end
        
        pal = xcosPal("MicroDAQ User");
    
        for i=1:size(blocks, "*")
            h5  = ls(root_tlbx + "/images/h5/"  + blocks(i) + "." + ["sod" "h5"]);
            gif = ls(root_tlbx + "/images/img/" + blocks(i) + "." + ["png" "gif"]);
            svg = ls(root_tlbx + "/images/svg/" + blocks(i) + "." + ["png" "jpg" "gif" "svg"]);
            pal = xcosPalAddBlock(pal, h5(1), gif(1), svg(1));
        end
    
        if ~xcosPalAdd(pal,"MicroDAQ User") then
            error(msprintf(gettext("%s: Unable to export %s.\n"), "microdaq.start", "pal"));
        end
    end
    
    userhostlib_loader = root_tlbx + pathconvert("/etc/userlib/hostlib/loader.sce", %f);
    
    if isfile(userhostlib_loader) then
        mprintf("\tLoad user host library\n");
        exec(userhostlib_loader);
    end
    
    %microdaq.ip_address = mdaq_get_ip();
    if %microdaq.ip_address == [] then
        mprintf("\nThank you for using MicroDAQ toolbox. The toolbox sources can be found\non: https://github.com/microdaq/Scilab where you can report issues or suggestions.\nFeel free to contribute to the toolbox with new features or improvments.\n")
        mprintf("\nRun microdaq_setup() to configure MicroDAQ toolbox")
    end
endfunction

[microdaqlib, microdaqBlocks, microdaqMacros, microdaqUserBlocks] = startModule();
clear startModule;
