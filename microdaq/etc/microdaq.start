// Copyright (c) 2015, Embedded Solutions
// All rights reserved.

// This file is released under the 3-clause BSD license. See COPYING-BSD.

function [microdaqlib, microdaqBlocks, microdaqMacros, microdaqUserBlocks] = startModule()

    // check minimal version (xcosPal required)
    // =============================================================================
    if ~isdef('xcosPal') then
        // and xcos features required
        error(gettext('Scilab 5.3.2 or more is required.'));
    end
    // =============================================================================
    // force to load some libraries (dependancies)
    loadScicos();
    // =============================================================================
    etc_tlbx  = get_absolute_file_path("microdaq.start");
    etc_tlbx  = getshortpathname(etc_tlbx);
    root_tlbx = strncpy( etc_tlbx, length(etc_tlbx)-length("\etc\") );

    fd=mopen(root_tlbx+filesep()+"VERSION");

    version=mgetl(fd,-1);

    mclose(fd);

    mprintf("Start MicroDAQ toolbox ver: %s\n", mgetl(root_tlbx + filesep() + "VERSION", 1));

    if isdef("microdaqlib") then
        warning("MicroDAQ toolbox is already loaded!");
        return;
    end

    // Load functions library
    // =============================================================================
    mprintf("\tLoad macros\n");
    pathmacros = pathconvert( root_tlbx ) + "macros" + filesep();
    microdaqlib = lib(pathmacros);
    pathmacros = pathconvert( root_tlbx ) + "macros" + filesep() + "microdaq_blocks" + filesep();
    microdaqBlocks = lib(pathmacros);
    pathmacros = pathconvert( root_tlbx ) + "macros" + filesep() + "microdaq_macros" + filesep();
    microdaqMacros = lib(pathmacros);

    if isfile(root_tlbx + filesep() + "macros" + filesep() + "user_blocks" + filesep() + "names")  == %T then
        pathmacros = pathconvert( root_tlbx ) + "macros" + filesep() + "user_blocks" + filesep();
        microdaqUserBlocks = lib(pathmacros);
    else
        microdaqUserBlocks = [];
    end

    // create global microdaq settings struct
    global %microdaq; 
    %microdaq = struct("model", ["Unknown"],..
                       "ip_address", [],..
                       "dsp_loaded", %F,..
                       "dsp_ext_mode", %T,..
                       "private", struct(..
                           "mlink_link_id", -1000,..
                           "connection_id", -1,..
                           "has_mdaq_block", %F,..
                           "mem_write_idx", 0,..
                           "mem_read_idx", 0,..
                           "mdaq_signal_id", 0,..
                           "mdaq_hwid", [])..
                       );
                       if isfile(mdaq_toolbox_path() + "etc"+filesep()+"mlink"+filesep()+"hwid") then
                           load(mdaq_toolbox_path() + "etc"+filesep()+"mlink"+filesep()+"hwid");
                           %microdaq.private.mdaq_hwid = mdaq_hwid; 
                           %microdaq.model = 'MicroDAQ E' + string(mdaq_hwid(1))..
                            + '-ADC0' + string(mdaq_hwid(2)).. 
                            + '-DAC0' + string(mdaq_hwid(3))..
                            + '-' + string(mdaq_hwid(4)) + string(mdaq_hwid(5));
                           clear mdaq_hwid; 
                       end

    // Add MicroDAQ toolbox options to XCos menu
    xcosAddToolsMenu("MicroDAQ web panel", "mdaq_webpanel()");
    xcosAddToolsMenu("MicroDAQ user disk", "mdaq_userdisk()");
	xcosAddToolsMenu("MicroDAQ WebScope", "mdaq_open_webscope()");
    xcosAddToolsMenu("MicroDAQ execution profile", "mdaq_exec_profile_show()");
    xcosAddToolsMenu("MicroDAQ upload model", "mdaq_dsp_upload()");
    xcosAddToolsMenu("MicroDAQ build model", "mdaq_code_gen(%F)");
    xcosAddToolsMenu("MicroDAQ load model", "load_last_dsp_image()");
    xcosAddToolsMenu("MicroDAQ build and load model", "mdaq_code_gen(%T)");

    // Load demos
    // =============================================================================
    if or(getscilabmode() == ["NW";"STD"]) then
        mprintf("\tLoad demos\n");
        pathdemos = pathconvert(root_tlbx+filesep()+"demos"+filesep()+"microdaq.dem.gateway.sce", %F, %T);
        add_demo("MicroDAQ", pathdemos);
    end

    // Load and add help chapter
    // =============================================================================
    if or(getscilabmode() == ["NW";"STD"]) then
        mprintf("\tLoad help\n");
        path_addchapter = pathconvert(root_tlbx+"/jar");
        if ( isdir(path_addchapter) <> [] ) then
            add_help_chapter("MicroDAQ", path_addchapter, %F);
        end
    end

    mprintf("\tLoad MLink library\n");
    exec(root_tlbx + filesep()+"etc"+filesep()+"mlink"+filesep()+"MLink.sce",-1);

    // Add blocks to the Xcos palette
    // =============================================================================
    mprintf("\tLoad MicroDAQ blocks\n");
    
    // if TMPDIR contains gif or svg files remove them
    img_files = ls(TMPDIR); 
    img_files_index = grep(img_files, ".gif");
    if img_files_index <> [] then
        for i = 1:size(img_files_index, '*')
            deletefile(TMPDIR + filesep() + img_files(img_files_index(i)));
        end
    end

    img_files_index = grep(img_files, ".svg");
    if img_files_index <> [] then
        for i = 1:size(img_files_index, '*')
            deletefile(TMPDIR + filesep() + img_files(img_files_index(i)));
        end
    end

    pal = xcosPal("MicroDAQ");

    // Build MicroDAQ blocks
    microdaq_blocks = mgetl( root_tlbx + filesep() + "macros" +..
             filesep() + "microdaq_blocks" + filesep() + "names");
    
    microdaq_blocks = microdaq_blocks';

    blocks = [];
    for i=1:size(microdaq_blocks, "*")
        if strstr(microdaq_blocks(i), "_sim") == ""
            blocks = [blocks, microdaq_blocks(i)];
        end
    end

    for i=1:size(blocks, "*")
        h5  = ls(root_tlbx + "/images/h5/"  + blocks(i) + "." + ["sod" "h5"]);
        gif = ls(root_tlbx + "/images/gif/" + blocks(i) + "." + ["png" "jpg" "gif"]);
        svg = ls(root_tlbx + "/images/svg/" + blocks(i) + "." + ["png" "jpg" "gif" "svg"]);
        pal = xcosPalAddBlock(pal, h5(1), gif(1), svg(1));
    end

    if ~xcosPalAdd(pal,"MicroDAQ") then
        error(msprintf(gettext("%s: Unable to export %s.\n"), "microdaq.start", "pal"));
    end

    //Create complete mdaq palette
    if isdef("gen_palette") == %T then
        //load xcos library
        if isdef("c_pass1") == %F then
            loadXcosLibs();
        end
        gen_palette();
        clear gen_palette;
    end

    // Build MicroDAQ User blocks
    if isfile(root_tlbx + filesep() + "macros" + filesep() + "user_blocks" + filesep() + "names")  == %T then

        mprintf("\tLoad MicroDAQ User blocks\n");
        pal = xcosPal("MicroDAQ User");
        microdaq_blocks = mgetl( root_tlbx + filesep() + "macros" + filesep() + "user_blocks" + filesep() + "names");
        microdaq_blocks = microdaq_blocks';

        blocks = [];
        for i=1:size(microdaq_blocks, "*")
            if strstr(microdaq_blocks(i), "_sim") == ""
                blocks = [blocks, microdaq_blocks(i)];
            end
        end

        for i=1:size(blocks, "*")
            h5  = ls(root_tlbx + "/images/h5/"  + blocks(i) + "." + ["sod" "h5"]);
            gif = ls(root_tlbx + "/images/gif/" + blocks(i) + "." + ["png" "jpg" "gif"]);
            svg = ls(root_tlbx + "/images/svg/" + blocks(i) + "." + ["png" "jpg" "gif" "svg"]);
            pal = xcosPalAddBlock(pal, h5(1), gif(1), svg(1));
        end

        if ~xcosPalAdd(pal,"MicroDAQ User") then
            error(msprintf(gettext("%s: Unable to export %s.\n"), "microdaq.start", "pal"));
        end
    end
    
    %microdaq.ip_address = mdaq_get_ip();

    if check_mdaq_compiler() == %F then
        mprintf("\nMicroDAQ toolbox is not configured, connect your MicroDAQ device and run microdaq_setup.\nFor more help on Xcos blocks, DSP managment functions, C code integration tools and other\nMicroDAQ toolbox features read help (help microdaq).\n");
    end

endfunction

if with_module('xcos') then
    [microdaqlib, microdaqBlocks, microdaqMacros, microdaqUserBlocks] = startModule();
    if microdaqUserBlocks == [] then
        clear microdaqUserBlocks;
    end
    
    clear startModule;
end

